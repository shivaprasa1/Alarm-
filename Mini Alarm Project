
// html code for Mini alarm project 

<!doctype html>
<html lang="en"> 
 <head> 
  <meta charset="UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <title>Digital alarm clock</title> 
 </head> 
 <body> 
  <div id="cont"> 
   <div id="clock"> 
    <div id="hours"></div> 
    <div id="divider">
     :
    </div> 
    <div id="minutes"></div> <span id="indicator"></span> 
   </div> <span id="alertText"></span> 
   <div id="alarm"> 
    <input type="time" id="time"> <label for="time">Set your time</label> 
   </div> 
   <div id="buttons"> <button id="start-alarm">Start alarm</button> <button id="stop-alarm">Stop alarm</button> 
   </div> 
  </div> 
 </body>
</html>





###// CSS code for Mini alarm project 





@import url('https://fonts.googleapis.com/css2?family=Lilita+One&family=Roboto+Mono:wght@500&display=swap');



:root {

    --primary-light: #8abdff;

    --primary: #6d5dfc;

    --primary-dark: #5b0eeb;

    --white: #FFFFFF;

    --greyLight-1: #E4EBF5;

    --greyLight-2: #c8d0e7;

    --greyLight-3: #bec8e4;

    --greyDark: #9baacf;

    --softred: #f47174;

}



*{

    padding: 0;

    margin: 0;

    box-sizing: border-box;

}

body{

    max-height: 100vh;

    height: 100vh;

    font-family: 'Roboto', sans-serif;

    font-size: 16px;

    background: var(--greyLight-1);

    display: grid;

    place-items: center;
    background-color:black;

}

#cont{

    border-bottom: 5px solid var(--primary);

    border-top: 5px solid var(--primary);

    border-radius: 10px;

    width: min(95%,300px);

    position: relative;

    display: flex;

    flex-direction: column;

    align-items: center;

    padding: 50px 10px 20px 10px;

    background-color: #e0e0e0;

}

#clock{

    width: 90%;

    display: flex;

    justify-content: center;

    align-items: center;

    border-radius: 50px;

    background: linear-gradient(145deg, #cacaca, #f0f0f0);

    box-shadow:

      20px 20px 60px #bebebe,

      -20px -20px 60px #ffffff;

      margin-bottom: 40px;

      position: relative;

}

#hours,#divider,#minutes,#indicator{

    font-family: 'Lilita One', cursive;

    background-color: #000;

    font-size: 5rem;

    margin: 3px;

    color: transparent;

    text-shadow: 0px 2px 3px var(--softred);

    background-clip: text;

    -webkit-background-clip: text;

}

#divider{

    font-size: 4rem;

}

#indicator{

    position: absolute;

    bottom: -5px;

    right: 40px;

    font-size: 1.5rem;

    color: transparent;

    text-shadow: 0px 2px 3px lightgray;

    background-clip: text;

    -webkit-background-clip: text;

}

#alertText{

    position: absolute;

    top: 50%;

    border-radius: 5px;

    opacity: 0;

    transition: .5s;

    background-color: var(--white);

    color: var(--primary-dark);

    font-weight: bold;

    font-size: 1rem;

    width: fit-content;

    padding: 3px 5px;

    box-shadow:

    0px 3px 5px -1px rgba(0, 0, 0, 0.2),

    0px 6px 10px 0px rgba(0, 0, 0, 0.14),

    0px 1px 18px 0px rgba(0,0,0,.12);

}

#alarm{

    width: 90%;

    display: flex;

    justify-content: flex-end;

    align-items: center;

    border: none;

    border-bottom: 2px solid var(--primary);

    margin-bottom: 40px;

    position: relative;

}

#alarm input{

    width: 100%;

    border: none;

    border-bottom: 2px solid var(--primary);

    padding: 10px;

    padding-bottom: 0;

    font-size: 1.5rem;

    color: var(--primary);

    background-color: transparent;

    text-align: center;

    outline: none;

    text-shadow: 0px 2px 3px var(--greyLight-3);

}

#alarm label{

    position: absolute;

    bottom: -20px;

    color: grey;

    transform: translateX(-100%);

    font-family: 'Roboto Mono', monospace;

}

#buttons{

    width: 90%;

    display: flex;

    justify-content: space-around;

}

#buttons button{

    width: 40%;

    border: 0;

    background: var(--primary-dark);

    padding: 5px;

    color: var(--white);

    border-radius: 5px;

    cursor: pointer;

    font-family: 'Roboto Mono', monospace;

    box-shadow:inset .2rem .2rem 1rem var(--primary-light), 

              inset -.2rem -.2rem 1rem var(--primary-dark),

              .3rem .3rem .3rem var(--greyLight-2);

}

#buttons button:active{

    background: var(--primary);

    box-shadow: inset .2rem .2rem .5rem darkslategray, 

inset -.2rem -.2rem .5rem darkslategray;

}




####// JS code for Mini alarm project 




alert("Welcome to AlarmMe, your one-time digital alarm system you'll ever need. ðŸ¤­\n\nGet ready to be alarmized ðŸ« ")



window.onload = () => {



  //Selecting all elements

  let hour = document.getElementById("hours"), 

  minute = document.getElementById("minutes"), 

  indicator = document.getElementById("indicator"),

  startBtn = document.querySelector("#start-alarm"),

  stopBtn = document.querySelector("#stop-alarm"),

  interval,

  //tone = document.querySelector("audio"),

  alarmVal = document.getElementById("time"),

  alertText = document.querySelector("#alertText");

  let tone = new Audio("https://walter-tronics.github.io/media/audios/ring.mp3");

  

  

  

  //Setting the current time function

  function clock(){

    //initializing the current time

    let t = new Date();

    let hours = t.getHours();

    let mins = t.getMinutes();



    //Setting the Post meridiem when the time is after noon

    if (hours>=12) {

      indicator.innerText="PM";

    }

    //Setting the ante meridiem when the time is before noon

    else indicator.innerText="AM";



    //When hour is less than 10, prepend the mumber 0 to it

    if (hours<10){

      hours = `0${hours}`;

    }



    //When minutes is less than 10, prepend the number 0 to it.

    if (mins<10){

      mins = `0${mins}`;

    }



    //I know it's probably shorter to use arithmetic evaluation to get this part of the code but I wanted to try out the switch statement, haven't used it before.

    switch (hours) {

      //Check for the hour value, change the output to it's respecive meridiem value and prepend the number 0 to it.

      case 13: hours="0"+1;break;

      case 14: hours="0"+2;break;

      case 15: hours="0"+3;break;

      case 16: hours="0"+4;break;

      case 17: hours="0"+5;break;

      case 18: hours="0"+6;break;

      case 19: hours="0"+7;break;

      case 20: hours="0"+8;break;

      case 21: hours="0"+9;break;

      case 22: hours=10;break;

      case 23: hours=11;break;

    }



    //assigning the values of hour and minute to elements in the DOM

    hour.innerText=hours;

    minute.innerText=mins;

  }



  //Updating the time values in the DOM by every 1 second

  setInterval(clock,1000);







  //initializing the alarm function

  function checkAlarm() {

    let alarm = alarmVal.value;



    //Getting a part of the time value that represents hour

    let alarmHours = alarm.slice(0,2);

    //Getting a part of the time value that represents minute

    let alarMins = alarm.slice(3,5);

    //Getting a part of the time value that indicates if it's before or after noon

    let alarmAMPM = alarm.slice(6,8);



    //Check if the time is after noon

    if (alarmAMPM == "PM") {

      //when time is after noon, create an instantiation of the hour and add 12 to its value to be able to match the current time value

      alarmHours = parseInt(alarmHours) + 12;

    }

    //Calling another current time value

    let t = new Date();

    let hours = t.getHours();

    let mins = t.getMinutes();



    //Check and play the tone if the created time instance from time value matches the current time

    if (hours == alarmHours && mins == alarMins) {

      tone.play();

    }

  }





  //Starting the alarm

  startBtn.addEventListener("click", ()=>{

    //If the Time value is not empty, then start the alarm

    if (alarmVal.value != undefined) {

      //Getting and showing the alarm alert

      alertText.innerText = "alarm started";

      alertText.style.opacity = 1;

      //Prevent any lurking intervals of time before starting

      clearInterval(interval);

      //Start the checking of the alarm

      interval = setInterval(checkAlarm, 1000);

      //Removing the alarm alert box after shown for some time

      setTimeout(()=>{

        alertText.style.opacity = 0;

      }, 1500);

      tone.play();

      tone.currentTime = 0;

      tone.pause();

    }

  });





  //Stoping the alarm check and the alarm

  stopBtn.addEventListener("click", ()=>{

    //Getting and showing the alarm alert

    alertText.innerText = "alarm stopped";

    alertText.style.opacity = 1;

    //Stoping the alarm check and pause the tone

    clearInterval(interval);

    tone.pause();

    tone.currentTime = 0;

    //Removing the alarm alert box after shown for some time

    setTimeout(()=>{

      alertText.style.opacity = 0;

    }, 1500);

  });





  //When user input the desired time, create and hold a storage of that time value

//   alarmVal.addEventListener("input", ()=>{

//     localStorage?.setItem?("alarmTime", alarmVal.value);

//   });



//   //Get and set the created storage value to the input when logged in to site

//   if (alarmVal.value != undefined) {

//     alarmVal.value = localStorage?.getItem?("alarmTime");

//   }



}
